Setup Instructions for Oracle Database 19c New Features (database files staged)

This is the setup instructions to create an image for the Oracle Database 19c New Features Workshop. In this setup, you configure VNC over Guacamole and stage the installer files for Oracle Database 19c.
Reference:
- https://guacamole.apache.org/doc/gug/guacamole-architecture.html
- https://oracle.github.io/learning-library/sample-livelabs-templates/create-labs/labs/workshops/freetier/?lab=optional-lab-6-setup-guacamole-remote-desktop-on#Step2:ConfigureDesktop

#---------------------------------
# Create a VCN
#---------------------------------
Name: livelabs
compartment: livelabs
CIDR blocks: 10.0.0.0/24
Select "USE DNS HOSTNAMES IN THIS VCN"

#----------------------------------
#Create a compute instance via OCI
#-----------------------------------
Sign in to OCI.
Create a LiveLabs compartment.

From the navigation menu, select Compute > Instances.
Click Create Instance.
Configure:
 Name: Workshop
 Compartment: LiveLabs
 Availability Domain: Accept the default values
 Image: Oracle Linux 7.9
 Shape: VM.Standard.E2.4
 Networking:

 virtual cloud network should be "livelabs" so that you get a DNS domain name: livelabs.oraclevcn.com

DNS Domain Name: livelabs.oraclevcn.com
 NAME THE VCN AND SUBNET  vcnLiveLabs, subnetLiveLabs
 VCN: display_name   = "labVCN"
      dns_label      = "labVCN"
SUBNET:  display_name        = "lab-public-subnet1"
         dns_label           = "subnet1"

GATEWAY:   display_name   = "lab-internet-gateway"

workshop-staged.livelabs.oraclevcn.com  workshop-staged
### SUBNET NAME -


 Generate SSH key pair. Save both the public key and private key locally as cloudshellkey.pub (public key) and cloudshellkey.key (private key).
 Boot volume: Accept the default values

 Download both private and public keys

Click Create.



#-----------------------------------------
#Connect to your database from Cloud Shell
#-----------------------------------------
In OCI, open Cloud Shell.

From the **Cloud Shell** menu, select **Upload**. The **File Upload to your Home Directory** dialog box is displayed.

Click **select from your computer**. Browse to and select your private key file (cloudshell.key), and then click **Open**. Click **Upload**. Your private key is uploaded to the `home` directory on your Cloud Shell machine.

Create an `.ssh` directory in the `home` directory.

  mkdir .ssh/

Move your private key to the `.ssh` directory. In the code below, replace `private-key-filename` with the name of own private key file. Be sure to include the slash (/) after .ssh in the command to ensure that the file gets moved to a directory.

  mv cloudshell.key .ssh/


Set permissions on the `.ssh` directory so that only you (the owner) can read, write, and execute on the directory. Also set permissions on the private key itself so that only you (the owner) can read and write (but not execute) on the private key file.

  $ chmod 700 ~/.ssh</copy>
  $ cd .ssh</copy>
  $ chmod 600 *</copy>

On the **Instance Information** tab for your compute instance, find the public IP address and copy it to the clipboard.

Enter the following `ssh` command to connect to your compute instance, replacing `private-key-file` and `public-ip-address` with your own values.

$ ssh -i ~/.ssh/cloudshell.key opc@public-ip-address

eg. ssh -i ~/.ssh/cloudshell.key opc@158.101.172.236

    You receive a message stating that the authenticity of your compute instance can't be established. Do you want to continue connecting?

Enter **yes** to continue. The public IP address of your compute instance is added to the list of known hosts on your Cloud Shell machine.

  The terminal prompt becomes `[opc@compute-instance-name ~]$`, where `compute-instance-name` is the name of your compute instance and `opc` is your user account on your compute instance. You are now connected to your new compute instance.



Review host files. The "/etc/hosts" file must contain a fully qualified name for the server.
cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.0.0.231 workshop.subnet04191155.vcn04191155.oraclevcn.com workshop

Review the correct hostname in the "/etc/hostname" file.
cat /etc/hostname
workshop-staged (or workshop-installed)

#--------------------------------------------------------
#Update the packages and run Oracle Database preinstaller
#--------------------------------------------------------

Switch to root user
sudo su - || sudo sed -i -e 's|root:x:0:0:root:/root:.*$|root:x:0:0:root:/root:/bin/bash|g' /etc/passwd; sudo su -

NOte from Rene: Sudo if unlocked, otherwise unlock then sudo. Per marketplace requirements root must be locked and is done so prior to snapping the custom image.
But if you need to get in as root for whatever reason when it has been locked then that's the command to run


Update the existing packages on the image
 yum -y update

 Enable the EPEL Yum Repo
   vi /etc/yum.repos.d/oracle-epel-ol7.repo
   enabled=1

Do the Oracle Database preinstall. This creates an oracle user
 yum -y install oracle-database-preinstall-19c

Set the password for the oracle user
  passwd oracle
  Ora4U_1234

NOT DOING: Set the appuser variable to oracle
    export appuser=oracle

Set up X11 forwarding

yum install -y xorg-x11-server-Xorg xorg-x11-xauth xorg-x11-utils xorg-x11-apps xorg-x11-fonts-* xorg-x11-font-utils xorg-x11-fonts-Type1
vi /etc/ssh/sshd_config
- `X11Forwarding yes` (already set by default)
- `X11DisplayOffset 10`
- `X11UseLocalhost no`

systemctl restart sshd


#---------------------------------------
## Install the GNOME desktop and VNC Server
#---------------------------------------

Install GNOME desktop
  yum -y groupinstall "Server with GUI"

Install VNC Server
  yum -y install tigervnc-server

#------------------------
#Configure the VNC server
#------------------------

Copy the default VNC Server configuration file
DIDN'T DO:    cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver_${appuser}@:1.service

DID DO: cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver_oracle@:1.service

Replace <USER> with ${appuser} the service unit file
DIDN'T DO:    sed -i "s/<USER>/${appuser}/g" /etc/systemd/system/vncserver_${appuser}@:1.service

DID DO: sed -i "s/<USER>/oracle/g" /etc/systemd/system/vncserver_oracle@:1.service

Set the firewall rule
firewall-cmd --zone=public --permanent --add-service=vnc-server
firewall-cmd --zone=public --permanent --add-port=5901/tcp
firewall-cmd  --reload

Activate the changes
  systemctl daemon-reload

Enable the VNC service at boot
DIDN'T DO:  systemctl enable vncserver_${appuser}@:1.service

DID do: systemctl enable vncserver_oracle@:1.service
> Created symlink from /etc/systemd/system/multi-user.target.wants/vncserver_oracle@:1.service to /etc/systemd/system/vncserver_oracle@:1.service.


Activate the changes again
  systemctl daemon-reload

Set the password for the VNC user
DIDN'T DO:   vncpasswd ${appuser}
Did do: vncpasswd oracle

    enter password:
    LiveLabs.Rocks_99
    Enter "n" to view only question.

Su over to the VNC user account and enforce the password when prompted
DIDN'T DO:   sudo su - ${appuser}

DID DO: sudo su - oracle
  vncserver
  Enter LiveLabs.Rocks_99 as password
  Enter n to not do view-only
  > xauth:  file /home/oracle/.Xauthority does not exist
  Creating default startup script /home/oracle/.vnc/xstartup
  Creating default config /home/oracle/.vnc/config
  Starting applications specified in /home/oracle/.vnc/xstartup
   Log file is /home/oracle/.vnc/workshop:1.log

Set screen resolution
  vi $HOME/.vnc/config
  comment out geometry and set to 1920x1080
  DIDN'T DO: comment out localhost. the parameter “-localhost” makes VNC server to listen on loopback interface and accept connection from a tunnel only.

Stop the newly started VNC Server running on :1
  vncserver -kill :1
  > Killing Xvnc process ID 27998

Switch to root user
    exit

Start the VNC Server using systemctl and check the status.
DIDN'T DO:    systemctl start vncserver_${appuser}@:1.service
             systemctl status vncserver_${appuser}@:1.service

Did do:
systemctl start vncserver_oracle@:1.service
systemctl status vncserver_oracle@:1.service


#---------------------------------------------------------
## Create a Tunnel for VNC through SSH
# --------------------------------------------------------

In this step, you create a tunnel for VNC through SSH so that all data is sent through an encrypted tunnel.

Using puttygen, convert your cloudshell.key into ppk format
You need to convert the private key that you obtained from Oracle Cloud Infrastructure into a .ppk file format so that you can use it with PuTTY.

1. Open **PuTTY Key Generator**.

2. From the **Conversions** menu, select **Import key**.

3. Browse to and select the private key file (.key) that was generated for you when you created your compute instance, and click **Open**. Your private key is converted into PPK format.

4. Leave **RSA** as the type of key to generate, and click **Save private key**.

5. Click **Yes** to save without a passphrase.

6. Enter a name for your private key (cloudshell.ppk), and click **Save**. It's helpful to use the same name as your original `KEY` file, but with a `PPK` file extension.

7. Close PuTTY Key Generator.

Configure a PuTTY connection
Note: from a terminal window, you would do this: $ ssh -L 5901:localhost:5901 opc@130.61.185.156

<public ip address>, port 22
user: opc
upload ppk key file
tunnel: source port: 5901
        destination localhost:5901
        All VNC traffic is routed through this SSH tunnel on Port 22, hence no additional port needs to be opened via Security Lists.
Click Open to connect.
In the PuTTY Security Alert dialog box, click Yes because you trust the new key.

Note: Make sure you're not on a VPN as PuTTY wont not let you connect to your compute instance.

#--------------------------------------------------
# Connect to the compute instance using VNC Viewer
#--------------------------------------------------

Start VNC VIEWER
  (vnc-viewer.png)

File > New connection

General tab:
-VNC Server: localhost:5901
-Name: Workshop-Staged or Workshop-Installed

Options tab:
- Picture quality: High
- Scaling: Automatic

Click Ok.

Right-click the connection name, and click Connect.

In the Encryption dialog box, select "Don't warn me about this again", and click Continue.
 (unencrypted-connection-dialog.png)

In the Authentication dialog box, enter the vnc password for oracle user (LiveLabs.Rocks_99).
Click OK.
  (gnome-initial-setup.png)

Leave English selected, and click Next.
For Typing, leave English (US) selected, and click Next.
  (gnome-typing-page.png)

On the Privacy page, leave location services on, and click Next
(gnome-privacy-page.png)

On the Connect Your Online Accounts page, click Skip.
(gnome-connect-online-accounts-page.png)

The Ready to Go page is displayed. Click Start Using Oracle Linux Server.
(gnome-ready-to-go-page.png)

The Getting Started page is displayed.
(gnome-getting-started-page.png)
You are connected as the `oracle` user.

Close the Getting Started page. The desktop is displayed. It should be in 1920x1080 and clear!
(gnome-desktop-oracle-linux.png)

CHECKPOINT: If everything is working at this point, you can continue to the next part.

Close VNC Viewer.

In PuTTY, enter exit.


#-------------------------------
## Prepare for Guacomole install
#-------------------------------
Apache Guacamole is a free and open source web application which lets you access your dashboard from anywhere using a modern web browser. It is a clientless remote desktop gateway which only requires Guacamole installed on a server and a web browser supporting HTML5.
Guacamole system is made up of two separate parts: Guacamole server, and Guacamole Client. For Guacamole to work, both of these tools must be installed.

In Cloud Shell, make sure you are logged in as the root user.

Check Java version (required for tomcat)
java -version
  > openjdk version "1.8.0_292"
OpenJDK Runtime Environment (build 1.8.0_292-b10)
OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)


Install the required dependencies. Includes tomcat.

yum -y install \
cairo-devel \
freerdp-devel \
lame-libs \
libguac-client-ssh \
libguac-client-vnc \
libjpeg-turbo-devel \
libpng-devel \
libssh2-devel \
libtelnet-devel \
libtool \
libuv-devel \
libvncserver-devel \
libvorbis-devel \
libwebp-devel \
libwebsockets-devel \
openssl-devel \
pango-devel \
tomcat \
tomcat-admin-webapps \
tomcat-webapps \
uuid-devel


Note: Removed these 4 from Rene's instructions because:
ffmpeg-devel \ (no package available)
libjpeg-devel \ (already installed)
libtheora \ (already installed)
opus \ (already installed)
guagc \ (getting installed later)

#-----------------------------
#Install the Guacamole server
#-----------------------------

Guacamole server consists of the native server-side libraries required to connect to the server and the “guacd” tool. guacd is the Guacamole proxy daemon which accepts the user’s connections and connects to the remote desktop on their behalf. Given below is the architecture of Guacamole System.
(guacamole-system.png)
It is required to compile and install the Guacamole server on the host machine, installing the binary is not possible for Guacamole server. Download the Guacamole server source code files into the temporary directory.

Change to the /opt directory
  cd /opt/

Download the Guacomole server source code
 wget https://downloads.apache.org/guacamole/1.3.0/source/guacamole-server-1.3.0.tar.gz

Extract the source code archive
 tar -xvf guacamole-server-1.3.0.tar.gz

Remove the GZ file
  rm -f /opt/guacamole-server-1.3.0.tar.gz

Change to the `guacamole-server-1.3.0` directory
  cd guacamole-server-1.3.0

Generate a build by running .configure
Once the guacamole-server source has been downloaded and extracted, you need to run configure. This is a shell script automatically generated by GNU Autotools, a popular build system used by the Guacamole project for guacamole-server. Running configure will determine which libraries are available on your system and will select the appropriate components for building depending on what you actually have installed. Once you run configure, you can see what a listing of what libraries were found and what it has determined should be built.
The --with-init-dir=/etc/init.d shown below prepares the build to install a startup script for guacd into the /etc/init.d directory, such that we can later easily configure the guacd daemon to start automatically on boot.
  # ./configure --with-init-dir=/etc/init.d

Compile the guacamole-server. Quite a bit of output will scroll up the screen as all the components are compiled.
 # make

Install the components that were built.
 # make install
Note: Ignore the warnings

Update your system's cache of installed libraries.
# ldconfig

At this point, everything is installed, but guacd is not running. You will need to run guacd in order to use Guacamole once the client components are installed as well. Beware that even after installing guacd and its startup script, you will likely still have to activate the service for it to start automatically.

Start and enable tomcat and gaucd (Guacamole proxy daemon). Make sure they are both started successfully.

systemctl enable tomcat
> Created symlink from /etc/systemd/system/multi-user.target.wants/tomcat.service to /usr/lib/systemd/system/tomcat.service.
systemctl restart tomcat
systemctl status tomcat
systemctl enable guacd
> guacd.service is not a native service, redirecting to /sbin/chkconfig.
  Executing /sbin/chkconfig guacd on


systemctl start guacd
systemctl status guacd



# ---------------------------------------------------------
# DEPLOY GUACAMOLE CLIENT
#--------------------------------------------------------

Make a directory to store the Guacamole client
  mkdir /etc/guacamole

Create a link between the files
  ln -s /etc/guacamole/ /usr/share/tomcat/.guacamole

Download Guacamole client binary file
  wget https://downloads.apache.org/guacamole/1.3.0/binary/guacamole-1.3.0.war -O /etc/guacamole/guacamole.war

Create a link between the files
  ln -s /etc/guacamole/guacamole.war /usr/share/tomcat/webapps/


# ---------------------------------------------------------
# Configuring Guacamole User and Connection
#--------------------------------------------------------

1. Create guacamole.properties file. The Guacamole web application uses one main configuration file called guacamole.properties. This file is the common location for all configuration properties read by Guacamole or any extension of Guacamole, including authentication providers.

  vi /etc/guacamole/guacamole.properties

paste and save:

guacd-hostname: localhost
guacd-port:    4822
user-mapping:    /etc/guacamole/user-mapping.xml
auth-provider:    net.sourceforge.guacamole.net.basic.BasicFileAuthenticationProvider
basic-user-mapping:    /etc/guacamole/user-mapping.xml


Get the value of the encrypted version of the oracle password by using the MD5 algorithm. This will be the oracle user password for guacamole.
  echo -n Guac.LiveLabs_ | openssl md5
> (stdin)= 33e3cc7ec32572a99ce33db0b2f08643

Create guacamole user mapping file "/etc/guacamole/user-mapping.xml". Replace the password value with the one you got in the previous step.

  vi /etc/guacamole/user-mapping.xml

paste and save:
Note: Make sure that when you paste, the first line isn't cut off

<user-mapping>
   <authorize username="oracle" password="33e3cc7ec32572a99ce33db0b2f08643" encoding="md5">
    <connection name="My LiveLabs Host">
      <protocol>vnc</protocol>
      <param name="hostname">localhost</param>
      <param name="port">5901</param>
      <param name="password">LiveLabs.Rocks_99</param>
    </connection>
   </authorize>
</user-mapping>


Assign permissions on the 2 files you just created:

chmod 600 /etc/guacamole/user-mapping.xml
chown -R tomcat:tomcat /etc/guacamole

Restart tomcat and guacamole services
  systemctl restart tomcat guacd

Add the guacamole ports to firewall
firewall-cmd --permanent --add-port={4822,8080}/tcp
firewall-cmd --reload


In OCI, access the virtual cloud network for the compute instance and add an ingress rule:

1. From the navigation menu, select Networking > Virtual Cloud Networks.
2. Select the LiveLabs compartment.
3. Click your vnc.
4. On the left, click Security Lists.
5. Click Create Security List.
6. Click Add Ingress Rules.
7. Configure the rule and click Save Changes.
source type: CIDR
source cidr 0.0.0.0/0
destination port: 8080
(ingress-rule.png, ingress-rule2)


#--------------------------------
# Access the Guacamole Desktop
#---------------------------------

LiveLabs compute instance are password-less and only accessible via SSH keys. As result it's important to adjust session settings some settings to ensure a better user experience.
Make sure you're not connected to VPN

In a browser, enter:
 http://compute-public-ip:8080/guacamole
http://158.101.172.236:8080/guacamole


Enter oracle, password = Guac.LiveLabs_, and click Login.  (don't forget the underscore at the end)
(guacamole-login-page.png)


Navigate to "Applications >> System Tools >> Settings"

Click "Privacy" and set Screen Lock to Off

Click "Power" and set Blank Screen under Power Saving to Never

Click on "Notifications" and set Notifications Popups and Lock Screen Notifications to Off

Scroll down and click Devices. For "Resolution", select 1920 x 1080 (16:9), if needed.

Close the window.


#----------------------------
# Add applications to desktop
#----------------------------

For ease of access to desktop applications provided on the instance and needed to perform the labs, follow the steps below to add shortcuts to the desktop.

Add a shortcut of FireFox browser.
1. On the desktop, open the Home folder.
2. Click Other Locations.
3. Navigate to /usr/share/applications and scroll-down to find FireFox.
4. Right-click on FireFox and select Copy to.
5. Navigate to Home > Desktop, and then click Select.
6. Double-click on the newly added icon on the desktop and click Trust and Launch.
7. Set the home page to a blank page.
8. Close the tabs.

Repeat steps above to add any other required Application the workshop may need to the Desktop (e.g. Terminal, SQL Developer, etc…)

Close the browser (http://130.61.185.156:8080)


#--------------------------------------------------------------
# Prerequisite Tasks before an Oracle Database 19c installation
#--------------------------------------------------------------

Return to Cloud Shell, connect to your instance as opc user, and switch to root user.


Make the oracle user a sudoer
  Run visudo
    sudo visudo

  Insert the following line after the root ALL=(ALL) ALL line:
    oracle  ALL=(root)      ALL

  Save and close



Create the Oracle base and Oracle inventory directories
mkdir -p /u01/app/oracle
mkdir -p /u01/app/oraInventory

Set permissions
chown -R oracle:oinstall /u01/app/oracle
chown -R oracle:oinstall /u01/app/oraInventory
chmod -R 775 /u01/app


Increase swap space to 16GB
  fallocate -l 8G /swapfile
  chmod 600 /swapfile
  mkswap /swapfile
  swapon /swapfile
  free -m
  vi /etc/fstab
  Add to the end of the file:
    /swapfile swap swap defaults 0 2




#----------------------------------------
# Stage all of the Oracle Database 19c installation ZIP files
#----------------------------------------

Include the following files in the /stage folder:
- 19c (19.3) installer
- OPatch
- 19.11 RU
- Class Files
* Note: These ZIP files are stored in object storage in c4u03 tenancy (LiveLabs) in the ll-19c bucket.
Nav menu > Storage > buckets > 11-19c

Continuing as the root user, create a /stage directory to store the Oracle Database 19c installation ZIP file.
mkdir -p /stage
chown -R oracle:oinstall /stage
su - oracle
Ora4U_1234

Switch to the /stage directory
cd /stage

Download the installer files for 19c (19.3)
wget https://objectstorage.us-phoenix-1.oraclecloud.com/p/i8c_TURS4YjjPZhO2mquk3jpvR7nF08CLfTg5xnGkzu3fKnJ0czlPYjD3GKRdkaJ/n/c4u03/b/ll-19c/o/LINUX.X64_193000_db_home.zip

Download the 19.11 RU
wget https://objectstorage.us-phoenix-1.oraclecloud.com/p/xaU_BDn_ntl9trrfKzCu2jzMKmE-rYZWzR0Coo_5U3ROPDCzFqvxJ3P_9lYdZO_R/n/c4u03/b/ll-19c/o/1911RUp32545013_190000_Linux-x86-64.zip

Download OPatch
wget https://objectstorage.us-phoenix-1.oraclecloud.com/p/ZNRZvvLLYKBHp90zDH9u5njWczT03Pb8Eks6qwN7TSjjK-AXO4QVMel2jboxzukn/n/c4u03/b/ll-19c/o/OPatchp6880880_190000_Linux-x86-64.zip

Download the class files
wget https://objectstorage.us-phoenix-1.oraclecloud.com/p/dgt7lH1w1nKOyJO3NLtuuKmW7PM1gImaZuLziTb1UCLUQDTkzVbI8RadVKk6WzRM/n/c4u03/b/ll-19c/o/19cNewFeaturesLabFiles19cNewFeatures.zip

cd /stage
ls


Extract the 19.3 ZIP and 19.11 RU
---------------------
Create an Oracle home directory and change to that directory.
mkdir -p /u01/app/oracle/product/19.11.0/dbhome_1
cd /u01/app/oracle/product/19.11.0/dbhome_1

Extract the Oracle Database 19c installation ZIP file from the stage directory into the Oracle home directory
unzip -q /stage/LINUX.X64_193000_db_home.zip


List the files/folders of the home directory and make sure that you have several, including OPatch and 32545013 directories
ls

Create a `patch/RU` directory in the Oracle home directory
---------------------------
It's important to use separate directories for the patches; otherwise, their XML files overwrite each other.

mkdir -p /u01/app/oracle/product/19.11.0/dbhome_1/patch/RU



Extract the 19.11 RU ZIP into the home directory
--------------------------------------------------
cd /u01/app/oracle/product/19.11.0/dbhome_1/patch
unzip -q /stage/1911RUp32545013_190000_Linux-x86-64.zip



Install OPatch
--------------------------
Currently, the version of OPatch is not correct so you need to update it.

1. While in the Oracle home directory, back up the old OPatch utility.

    ```nohighlighting
    $ <copy>cd /u01/app/oracle/product/19.11.0/dbhome_1/</copy>
    $ <copy>mv OPatch/ OPatch_backup</copy>
    ```

2. Make sure that the `OPatch` directory doesn't exists now. Instead, you now have `OPatch_backup`.

    ```nohighlighting
    $ <copy>ls</copy>
    ```

3.  Unzip the OPatch ZIP file into the Oracle home directory.

    ```nohighlighting
    $ <copy>unzip -q /stage/OPatchp6880880_190000_Linux-x86-64.zip</copy>
    ```

4. List the files and folders in the Oracle home directory and verify that you now have an `OPatch` directory.

    ```nohighlighting
    $ <copy>ls</copy>
    ```
5. View the version of the OPatch utility and verify that it is version 12.2.0.1.23 or later.

    ```nohighlighting
    $ <copy>OPatch/opatch version</copy>
    OPatch Version: 12.2.0.1.24

    OPatch succeeded.
    ```

Extract the lab files
-----------------------
1. As the `oracle ` user, change to the home directory

 cd ~/

2. List the contents. You should have:
 Desktop  Documents  Downloads   Music  Pictures   Public  Templates   Videos

3. Create a `lab` directory, set permissions, and change to it.

    ```nohighlighting
    $ <copy>mkdir -p ~/labs/</copy>
    $ <copy>chown -R oracle:oinstall ~/labs</copy>
    $ <copy>cd ~/labs

4.  Unzip the lab files.

    ```nohighlighting
    $ <copy>unzip -q /stage/19cNewFeaturesLabFiles19cNewFeatures.zip</copy>
    ```

5. Verify that you have the following:
ls
admin  DB  db.rsp  DIAG  DW HA  OBEs PERF SEC  Videos


########################################################
# Create Custom OCI Compute Image for Marketplace Publishing
##########################################################
1. As opc, run sudo su - to login as root
sudo su - || sudo sed -i -e 's|root:x:0:0:root:/root:.*$|root:x:0:0:root:/root:/bin/bash|g' /etc/passwd; sudo su -

2. Make a bootstrap directory and change to that directory
mkdir -p /root/bootstrap
cd /root/bootstrap

3. vi firstboot.sh

#!/bin/bash
# Copyright (c) 2021 Oracle and/or its affiliates. All rights reserved.
################################################################################
#
# Name: "firstboot.sh"
#
# Description:
#   Script to perform one-time adjustment to an OCI instance upon booting for the
#   first time to preserve a static hostname across reboots and adjust any setting
#   specific to a given workshop
#
#  Pre-requisite: This should be executed as "root" user.
#
#  AUTHOR(S)
#  -------
#  Rene Fontcha, Oracle LiveLabs Platform Lead
#
#  MODIFIED        Date                 Comments
#  --------        ----------           -----------------------------------
#  Rene Fontcha    02/17/2021           Initial Creation
#
###############################################################################

# Preserve user configured hostname across instance reboots
sed -i -r 's/^PRESERVE_HOSTINFO.*$/PRESERVE_HOSTINFO=2/g' /etc/oci-hostname.conf

# Preserve hostname info and set it for current boot
hostnamectl set-hostname workshop-staged.livelabs.oraclevcn.com

# Add static name to /etc/hosts
echo "\$(oci-metadata -g privateIp --value-only | head -1)   workshop-staged.livelabs.oraclevcn.com  workshop-staged" >>/etc/hosts


From Jody:
<!--- Comment: If you are testing in your own tenancy, you need to change the /etc/hosts file. The line that has workshop-staged.livelabs.oraclevcn.com only works in the livelabs tenancy. If you only have this line, the installer will fail. Add a line with your own subnet and vcn names; for example: 130.61.85.145   workshop-staged.subnet04291456.vcn04291456.oraclevcn.com -->


4. Make script /root/bootstrap/firstboot.sh executable, add soft link to /var/lib/cloud/scripts/per-instance and run it

chmod +x /root/bootstrap/firstboot.sh

ln -sf /root/bootstrap/firstboot.sh /var/lib/cloud/scripts/per-instance/firstboot.sh

/var/lib/cloud/scripts/per-instance/firstboot.sh

hostname
> workshop-staged.livelabs.oraclevcn.com

exit

5. Clean up the image for image capture
a) As user opc, Download the latest oci-image-cleanup.sh script.

cd /tmp

wget https://raw.githubusercontent.com/oracle/oci-utils/master/libexec/oci-image-cleanup -O /tmp/oci-image-cleanup.sh

chmod +x oci-image-cleanup.sh

b) Create a `/tmp/cleanup.sh` script.

vi /tmp/cleanup.sh

paste:

#!/bin/bash
sudo service rsyslog stop
sudo service auditd stop
sudo sh -c 'yes| /tmp/oci-image-cleanup.sh'
sudo find /var/log -type f -exec cp /dev/null {} \;
sudo find /var/log -type f -size 0 -exec rm {} +
sudo rm -rf /var/lib/cloud/instances/*
sudo rm -f /home/opc/get-pip.py
sudo rm -f /home/opc/.bashrc-orig
sudo rm -f /home/oracle/.bash_history
sudo sed -i -e 's|\\\(^.*PermitRootLogin.*$\\\)|PermitRootLogin no|g' /etc/ssh/sshd_config
sudo sed -i -e 's|root:x:0:0:root:/root:/bin/bash|root:x:0:0:root:/root:/sbin/nologin|g' /etc/passwd
sudo ln -sf /root/bootstrap/firstboot.sh /var/lib/cloud/scripts/per-instance/firstboot.sh
sudo ln -sf /root/bootstrap/eachboot.sh /var/lib/cloud/scripts/per-boot/eachboot.sh
sudo rm -f /var/log/audit/audit.log


c) Set permissions on the cleanup.sh
chmod +x /tmp/cleanup.sh

d) Run cleanup.sh

/tmp/cleanup.sh

6. Clean up the /etc/hosts file
Make sure there is no entry with a public IP. The startup script will add the IP address automatically on boot.
vi /etc/hosts
delete any lines that start with 10.0.0....
Keep the first two lines.


###################################################
# Create custom image in OCI
#############################################
Your instance at this point is ready for clean capture. Proceed to OCI console to perform the next steps

1. From the navigation menu in OCI, select Compute > Instances.

2. Select the instance on which you just performed the prior cleanup steps. Make sure to select the right compartment.

3. From the More Actions menu, select Create Custom Image. The create Custom Image dialog box is displayed.

4. Select Custom-Images compartment.

5. Enter workshop-staged for the image name.

6. Click Create Custom Image.

7. When the image is created, navigate to your custom image:
a) From the navigation menu, select Compute > Custom Images.
b) Click your custom image.

8. To test the image, click Create Instance from the custom image page.

9 After successful instance creation, logon to the host and validate.
