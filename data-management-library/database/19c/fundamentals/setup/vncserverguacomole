Configure VNC over Guacamole
Good info: https://guacamole.apache.org/doc/gug/guacamole-architecture.html


1. Create a compute instance via OCI

Name: Workshop
Oracle Linux 7.9
VM.Standard.E2.4
new vcn
Create private/public keys and save public and private key locally.

Open Cloud Shell

Upload private key and move to .ssh directory
cd .ssh
chmod 600 *

Connect to compute
Workshop: ssh -i ~/.ssh/cloudshellkey.key opc@130.61.185.156
computeVNC: ssh -i ~/.ssh/cloudshellkey.key opc@158.101.161.116
enter yes

Review host files. The "/etc/hosts" file must contain a fully qualified name for the server.
cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.0.0.231 workshop.subnet04191155.vcn04191155.oraclevcn.com workshop

Set the correct hostname in the "/etc/hostname" file.
cat /etc/hostname
workshop

PreInstall for Oracle Database
------------------------------
sudo su - (switch to root)
sudo su - || sudo sed -i -e 's|root:x:0:0:root:/root:.*$|root:x:0:0:root:/root:/bin/bash|g' /etc/passwd; sudo su -

create oracle user (in case you don't want to do entire oracle-database-preinstall-19c)

groupadd -g 54321 oinstall
groupadd -g 54322 dba
groupadd -g 54323 oper
useradd -u 54321 -g oinstall -G dba,oper oracle

yum install oracle-database-preinstall-19c
-enter y
yum update
y

passwd oracle
JJjj__123


Install VNC
-----------


## Install the GNOME desktop
(Install X-Server required packages ...")
yum -y groupinstall "Server with GUI"

## Install VNC Server
# yum -y install tigervnc-server


## Configure the VNC server

Setup VNC Server Configuration File
# cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver_oracle@:1.service

Replace <user> in file above with oracle. Make 1 replacement <USER> --> oracle
# vi /etc/systemd/system/vncserver_oracle@:1.service

Set the firewall rule
# firewall-cmd --zone=public --permanent --add-service=vnc-server
# firewall-cmd --zone=public --permanent --add-port=5901/tcp
# firewall-cmd  --reload

Set the VNC password for the oracle user
# vncpasswd oracle
LiveLabs.Rocks_99
(Enter n  to not view only. View only means someone to be able to connect to the server, but you don’t want them to be able to control anything (they can only view the screen)

# systemctl daemon-reload
# systemctl enable vncserver_oracle@:1.service
-> Created symlink from /etc/systemd/system/multi-user.target.wants/vncserver_oracle@:1.service to /etc/systemd/system/vncserver_oracle@:1.service.
# systemctl daemon-reload




sudo over to oracle user and enforce password
# sudo su - oracle
# vncserver
->You will require a password to access your desktops.

Enter password and verify password LiveLabs.Rocks_99.
Would you like to enter a view-only password (y/n)?, enter N

A view-only password is not used
xauth:  file /home/oracle/.Xauthority does not exist

New 'workshop:1 (oracle)' desktop is workshop:1

Creating default startup script /home/oracle/.vnc/xstartup
Creating default config /home/oracle/.vnc/config
Starting applications specified in /home/oracle/.vnc/xstartup
Log file is /home/oracle/.vnc/workshop:1.log

Stop the newly started VNC Server running on ":1"
# vncserver -kill :1
->Killing Xvnc process ID 14572

return to root
# exit

Start VNC Server using systemctl
# systemctl start vncserver_oracle@:1.service
# systemctl status vncserver_oracle@:1.service

vncserver_oracle@:1.service - Remote desktop service (VNC)
   Loaded: loaded (/etc/systemd/system/vncserver_oracle@:1.service; enabled; vendor preset: disabled)
   Active: active (running) since Mon 2021-04-19 01:01:09 GMT; 9s ago
  Process: 16412 ExecStartPre=/bin/sh -c /usr/bin/vncserver -kill %i > /dev/null 2>&1 || : (code=exited, status=0/SUCCESS)
 Main PID: 16416 (vncserver_wrapp)
   CGroup: /system.slice/system-vncserver_oracle.slice/vncserver_oracle@:1.service
           ├─16416 /bin/sh /usr/bin/vncserver_wrapper oracle :1
           └─17237 sleep 5

Apr 19 01:01:09 workshop systemd[1]: Starting Remote desktop service (VNC)...
Apr 19 01:01:09 workshop systemd[1]: Started Remote desktop service (VNC).
Apr 19 01:01:12 workshop vncserver_wrapper[16416]: New 'compute1:1 (oracle)' desktop is compute1:1
Apr 19 01:01:12 workshop vncserver_wrapper[16416]: Starting applications specified in /home/oracle/.vnc/xstartup
Apr 19 01:01:12 workshop vncserver_wrapper[16416]: Log file is /home/oracle/.vnc/compute1:1.log
DID NOT SEE: Apr 19 01:01:17 workshop vncserver_wrapper[16416]: 'vncserver :1' has PID 16440, waiting until it exits ...



## Create a Tunnel for VNC through SSH

Create a tunnel for VNC through SSH, so I can punch through the VNC port, and also so I will be sending all of the data through an encrypted tunnel.
convert private key using puttygen -> ppk format

PuTTY - create SSH tunnel for you to use for VNC
Note: from a terminal window, you would do this: $ ssh -L 5901:localhost:5901 opc@130.61.185.156
130.61.185.156, port 22
user: opc
upload ppk key file
tunnel: source port: 5901
        destination <publicip>:5901  -- > 130.61.185.156:5901
        All VNC traffic is routed through this SSH tunnel on Port 22, hence no additional port needs to be opened via Security Lists.
Enter y to accept at prompt.
> Authenticating with public key "imported-openssh-key"
Last login: Mon Apr 19 16:10:47 2021 from 132.145.236.16

Note: Make sure you're not on a VPN as it might not let you connect to your compute instance.


## Connect to the compute instance using VNC Viewer

Open VNC Viewer.
(vnc-viewer.png)
In the "Enter a VNC Server address or search" box, enter **localhost:5901**, and select **Connect to address or hostname "localhost:5901"**.


In Unencrypted dialog box, enter Continue.
(unencrypted-connection-dialog.png)
In the VNC Server password dialog box, enter the vncserver password, which is LiveLabs.Rocks_99, and click OK.
the Welcome page for the gnome-initial-setup is displayed (gnome-initial-setup.png)

Leave English selected, and click Next.
For Typing, leave English (US) selected, and click Next.
(gnome-typing-page.png)

On the Privacy page, leave location services on, and click Next
(gnome-privacy-page.png)

On the Connect Your Online Accounts page, click Skip.
(gnome-connect-online-accounts-page.png)

The Ready to Go page is displayed. Click Start Using Oracle Linux Server.
(gnome-ready-to-go-page.png)

The Getting Started page is displayed.
(gnome-getting-started-page.png)
You are connected as the `oracle` user.


Close the Getting Started page. The desktop is displayed.
(gnome-desktop-oracle-linux.png)






## Set up Guacomole
Apache Guacamole is a free and open source web application which lets you access your dashboard from anywhere using a modern web browser. It is a clientless remote desktop gateway which only requires Guacamole installed on a server and a web browser supporting HTML5.
Guacamole system is made up of two separate parts: Guacamole server, and Guacamole Client. For Guacamole to work, both of these tools must be installed.

Check Java version (required for tomcat)
[root@workshop ~]# java -version
openjdk version "1.8.0_282"
OpenJDK Runtime Environment (build 1.8.0_282-b08)
OpenJDK 64-Bit Server VM (build 25.282-b08, mixed mode)

Verify that the EPEL Yum Repo is configured and enabled. i.e. contains the entry enabled=1. If not update it accordingly before proceeding with the next step
vi /etc/yum.repos.d/oracle-epel-ol7.repo
Make edit: enabled=1


Install the required dependencies:

yum -y install cairo-devel libjpeg-turbo-devel libjpeg-devel libpng-devel uuid-devel freerdp-devel pango-devel libssh2-devel libssh-devel gcc freerdp-plugins libtelnet-devel libvncserver-devel pulseaudio-libs-devel openssl-devel libvorbis-devel libwebp-devel gnu-free-mono-fonts

Note: To build guacamole-server, you will need a C compiler (such as gcc) and the libraries that guacamole-server depends on. Some dependencies are absolutely required, while others are optional. The presence of optional dependencies enables additional features.
Note 2: Many Linux distributions separate library packages into binary and "development" packages; you will need to install the development packages. These will usually end in a "-dev" or "-devel" suffix.
Note 3: guacd is the proxy daemon that runs on your Guacamole server, accepts users' connections that are tunneled through the Guacamole web application, and then connects to remote desktops on their behalf. Building guacd creates an executable called guacd which can be run manually or, if you wish, automatically when your computer starts up.
Note 4: All protocols that require a terminal (Kubernetes, SSH, and telnet) require that fonts are installed on the Guacamole server in order to function, as output from the terminal cannot be rendered otherwise. Thus gnu-free-mono-fonts

Absolutely required:
yum -y install \
cairo-devel \
libjpeg-turbo-devel \
libpng-devel \
libtool \
uuid-devel

The optional dependencies of Guacamole dictate which parts of guacamole-server will be built. This includes the support for various remote desktop protocols, as well as any additional features of those protocols:
 - VNC support depends on the libvncclient library, which is part of libVNCServer.
 - RDP support depends on a recent version of FreeRDP (1.0 or higher, but please not a non-release version from git).
 - SSH support depends on libssh2, OpenSSL and Pango (a font rendering and text layout library, used by Guacamole's built-in terminal emulator).
 - Telnet depends on libtelnet and Pango.
 - Kubernetes support depends on libwebsockets, OpenSSL, and Pango.

yum -y install \
 libvncserver-devel \
 freerdp-devel \
 libssh2-devel \
 openssl-devel \
 pango-devel \
 libtelnet-devel \
 libwebsockets-devel \
 openssl-devel

 Install others
 yum -y install \
 libjpeg-devel \
 libvorbis-devel \
 libwebp-devel \
 pulseaudio-libs-devel \
 libguac-client-ssh \
 libguac-client-vnc \
 lame-libs \
 libtheora \
 libuv-devel  \
 opus


Rene also had these:
yum -y install \
guacd \


Website also mentioned these:
 libssh-devel gcc gnu-free-mono-fonts pulseaudio-libs-devel





some that aren't installed:
The guacenc utility, provided by guacamole-server to translate screen recordings into video, depends on FFmpeg, and will only be built if at least the libavcodec, libavformat, libavutil, and libswscale libraries provided by FFmpeg are installed.  If you lack these dependencies, then the features or protocols which depend on them will not be enabled.
ffmpeg-devel
Note: to install FFmpeg (to enable support for session recording) if it doesn't install. FFmpeg is available in RPMfusion repository.
cd /tmp
wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
ls *.rpm
yum install epel-release-latest-7.noarch.rpm
yum install -y ffmpeg-devel


PulseAudio provides libpulse, which is used by Guacamole's VNC support to provide experimental audio support. If you are not going to be using the experimental audio support for VNC, you do not need this library.

pulseaudio-libs-devel




this is what Rene has:

yum -y install \
cairo-devel \
ffmpeg-devel \
freerdp-devel \
guacd \
lame-libs \
libguac-client-ssh \
libguac-client-vnc \
libjpeg-devel \
libjpeg-turbo-devel \
libpng-devel \
libssh2-devel \
libtelnet-devel \
libtheora \
libtool \
libuv-devel  \
libvncserver-devel \
libvorbis-devel \
libwebp-devel \
libwebsockets-devel \
openssl-devel \
opus \
pango-devel \
tigervnc-server \
tomcat \
tomcat-admin-webapps \
tomcat-webapps \
uuid-devel



Note: couldn't install:
libjpeg-devel


What about:
libavcodec
libavformat
libavutil
libswscale
wsock32



## INSTALL GUACAMOLE SERVER

Guacamole server consists of the native server-side libraries required to connect to the server and the “guacd” tool. guacd is the Guacamole proxy daemon which accepts the user’s connections and connects to the remote desktop on their behalf. Given below is the architecture of Guacamole System.
(guacamole-system.png)

It is required to compile and install the Guacamole server on the host machine, installing the binary is not possible for Guacamole server. Download the Guacamole server source code files into the temporary directory.




Change to root user

Change to the /opt directory (this could also be a /tmp directory)
# cd /opt/

Download the Guacomole server source code
wget https://downloads.apache.org/guacamole/1.3.0/source/guacamole-server-1.3.0.tar.gz

Extract the source code archive
tar -xvf guacamole-server-1.3.0.tar.gz

Remove the GZ file
rm -f /opt/guacamole-server-1.3.0.tar.gz

Change to the `guacamole-server-1.3.0` directory
cd guacamole-server-1.3.0


THE BUILD PROCESS

1. Once the guacamole-server source has been downloaded and extracted, you need to run configure. This is a shell script automatically generated by GNU Autotools, a popular build system used by the Guacamole project for guacamole-server. Running configure will determine which libraries are available on your system and will select the appropriate components for building depending on what you actually have installed. Once you run configure, you can see what a listing of what libraries were found and what it has determined should be built.

The --with-init-dir=/etc/init.d shown below prepares the build to install a startup script for guacd into the /etc/init.d directory, such that we can later easily configure the guacd daemon to start automatically on boot.


./configure --with-init-dir=/etc/init.d

>------------------------------------------------
guacamole-server version 1.3.0
------------------------------------------------

   Library status:

     freerdp2 ............ yes
     pango ............... yes
     libavcodec .......... no
     libavformat.......... no
     libavutil ........... no
     libssh2 ............. yes
     libssl .............. yes
     libswscale .......... no
     libtelnet ........... yes
     libVNCServer ........ yes
     libvorbis ........... yes
     libpulse ............ yes
     libwebsockets ....... yes
     libwebp ............. yes
     wsock32 ............. no

   Protocol support:

      Kubernetes .... yes
      RDP ........... yes
      SSH ........... yes
      Telnet ........ yes
      VNC ........... yes

   Services / tools:

      guacd ...... yes
      guacenc .... no
      guaclog .... yes

   FreeRDP plugins: /usr/lib64/freerdp2
   Init scripts: /etc/init.d
   Systemd units: no

Type "make" to compile guacamole-server.

2. Compile the guacamole-server. Quite a bit of output will scroll up the screen as all the components are compiled.

# make


3. Install the components that were built.

# make install

4. Update your system's cache of installed libraries.

# ldconfig

At this point, everything is installed, but guacd is not running. You will need to run guacd in order to use Guacamole once the client components are installed as well. Beware that even after installing guacd and its startup script, you will likely still have to activate the service for it to start automatically.


<not sure this stuff goes here>
Start the Guacamole proxy daemon and enable it to automatically start at boot time using the following commands.

# systemctl enable guacd
>guacd.service is not a native service, redirecting to /sbin/chkconfig.
Executing /sbin/chkconfig guacd on
should I have gotten:
> Created symlink from /etc/systemd/system/multi-user.target.wants/guacd.service to /usr/lib/systemd/system/guacd.service.

# systemctl start guacd

You can check the status of the service by running.
# systemctl status guacd
> guacd.service - Guacamole proxy daemon
   Loaded: loaded (/usr/lib/systemd/system/guacd.service; enabled; vendor preset: disabled)
   Active: active (running) since Mon 2021-04-19 19:05:15 GMT; 10s ago
     Docs: man:guacd(8)
 Main PID: 774 (guacd)
    Tasks: 1
   Memory: 10.5M
   CGroup: /system.slice/guacd.service
           └─774 /usr/sbin/guacd -f

Apr 19 19:05:15 workshop systemd[1]: Started Guacamole proxy daemon.
Apr 19 19:05:15 workshop guacd[774]: Guacamole proxy daemon (guacd) version 1.3.0 started
Apr 19 19:05:15 workshop guacd[774]: Listening on host 127.0.0.1, port 4822
Apr 19 19:05:15 workshop guacd[774]: guacd[774]: INFO:        Guacamole proxy daemon (guacd) version 1.3.0 started
Apr 19 19:05:15 workshop guacd[774]: guacd[774]: INFO:        Listening on host 127.0.0.1, port 4822

</end of not sure>

# -------------------------------------------------------
# INSTALL TOMCAT - prereq to guacamole client
#--------------------------------------------------

## Install Tomcat
Tomcat is a Java application server designed to deploy Java Servlets and JSPs on your system. Developed by the Apache Software Foundation, it is one of the most widely used Java applications and web servers. Tomcat was created in an effort towards making an HTTP server which was purely built on Java and allowed Java code operations.

1. Make sure that you have Java runtime installed on the compute instance. Installing JDK is not required since we do not need to compile any Java code. On your compute instance, you already have a Java runtime
[root@workshop ~]# java -version
openjdk version "1.8.0_282"
OpenJDK Runtime Environment (build 1.8.0_282-b08)
OpenJDK 64-Bit Server VM (build 25.282-b08, mixed mode)


if no Java runtime, do this:
yum -y install java-1.8.0-openjdk.x86_64





2) Create a new group and user for Tomcat installation. Running Tomcat server with an unprivileged user is recommended for security reasons.
groupadd tomcat
useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat

cd /opt

3) Download latest Tomcat server of version 8.5 from Apache mirror.
wget http://www-us.apache.org/dist/tomcat/tomcat-8/v8.5.28/bin/apache-tomcat-8.5.28.tar.gz

latest version:
wget http://www-us-apache.org/dist/tomcat/tomcat-10/v10.0.5/bin/apache-tomcat-10.0.5.tar.gz

wget https://www-us.apache.org/dist/tomcat/tomcat-10/v10.0.5/bin/apache-tomcat-10.0.5.tar.gz

4) Extract archive into /opt/tomcat directory
mkdir /opt/tomcat
tar xvf apache-tomcat-10*.tar.gz -C /opt/tomcat --strip-components=1

5) Provide appropriate permissions and ownership to Tomcat server files.
cd /opt/tomcat
chgrp -R tomcat /opt/tomcat
chmod -R g+r conf
chmod g+x conf
chown -R tomcat webapps/ work/ temp/ logs/



chown -R tomcat:tomcat /opt/tomcat/
chmod -R u+x /opt/tomcat/bin

6) (FIRST CHECK IF THIS FILE EXISTS ALREADY) Create a new systemd service file for managing Tomcat server.
Note: /etc/tomcat/tomcat.conf contains the same as below in my original installation


vi /etc/systemd/system/tomcat.service

7) Populate the file with the following configuration.
[Unit]
Description=Tomcat
After=network.target

[Service]
Type=forking

User=tomcat
Group=tomcat

Environment="JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64"
Environment="JAVA_OPTS=-Djava.security.egd=file:///dev/urandom"
Environment="CATALINA_BASE=/opt/tomcat"
Environment="CATALINA_HOME=/opt/tomcat"
Environment="CATALINA_PID=/opt/tomcat/temp/tomcat.pid"
Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"

ExecStart=/opt/tomcat/bin/startup.sh
ExecStop=/opt/tomcat/bin/shutdown.sh

[Install]
WantedBy=multi-user.target


8) Start the Tomcat server and enable it to automatically start at boot time.

systemctl start tomcat
systemctl enable tomcat
> Created symlink from /etc/systemd/system/multi-user.target.wants/tomcat.service to /usr/lib/systemd/system/tomcat.service.

# systemctl restart tomcat

# systemctl status tomcat
>tomcat.service - Apache Tomcat Web Application Container
   Loaded: loaded (/usr/lib/systemd/system/tomcat.service; enabled; vendor preset: disabled)
   Active: active (running) since Mon 2021-04-19 19:03:44 GMT; 10s ago
 Main PID: 32686 (java)
    Tasks: 48
   Memory: 275.9M
   CGroup: /system.slice/tomcat.service
           └─32686 /usr/lib/jvm/jre/bin/java -Djavax.sql.DataSource.Factory=org.apache.commons.dbcp.BasicDataSourceFactory -classpath /usr/share/tomcat/bin/bootstrap.jar:/usr/share/tomcat/bin/tomcat-juli.jar:/usr/share...

Apr 19 19:03:46 workshop server[32686]: Apr 19, 2021 7:03:46 PM org.apache.catalina.startup.TldConfig execute
Apr 19 19:03:46 workshop server[32686]: INFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs ...ompilation time.
Apr 19 19:03:46 workshop server[32686]: Apr 19, 2021 7:03:46 PM org.apache.catalina.startup.HostConfig deployDirectory
Apr 19 19:03:46 workshop server[32686]: INFO: Deployment of web application directory /var/lib/tomcat/webapps/manager has finished in 155 ms
Apr 19 19:03:46 workshop server[32686]: Apr 19, 2021 7:03:46 PM org.apache.coyote.AbstractProtocol start
Apr 19 19:03:46 workshop server[32686]: INFO: Starting ProtocolHandler ["http-bio-8080"]
Apr 19 19:03:46 workshop server[32686]: Apr 19, 2021 7:03:46 PM org.apache.coyote.AbstractProtocol start
Apr 19 19:03:46 workshop server[32686]: INFO: Starting ProtocolHandler ["ajp-bio-8009"]
Apr 19 19:03:46 workshop server[32686]: Apr 19, 2021 7:03:46 PM org.apache.catalina.startup.Catalina start
Apr 19 19:03:46 workshop server[32686]: INFO: Server startup in 1516 ms
Hint: Some lines were ellipsized, use -l to show in full.


You can check if Tomcat is running by going to http://your-server-ip:8080 using your favourite web browser. You should see the default Tomcat page. If you are getting some error, then make sure that port “8080” is allowed in Security group rules.




# ---------------------------------------------------------
# DEPLOY GUACAMOLE CLIENT
#--------------------------------------------------------

Guacamole client is Java based web application which contains all the Java and JavaScript code required for running the user interface of Guacamole. It ultimately creates a web application which connects to the guacd daemon running in the background using Guacamole protocol. In the foreground, it renders the remote desktop interface using HTML5 on the web browser to the authorized users.

Unlike Guacamole server, Guacamole client is not required to be compiled and installed from source. Cross-platform Guacamole client binary is available to download and install. Guacamole binary requires a Java web server to run. In this tutorial, you use Apache Tomcat to run the Guacamole binary file.

The web application portion of Guacamole is packaged as a fully self-contained .war file. If you downloaded Guacamole from the main project web site, this file will be called guacamole.war. Deploying this involves copying the file into the directory your servlet container uses for .war files. In the case of Tomcat, this will be CATALINA_HOME/webapps/. The location of CATALINA_HOME will vary by how Tomcat was installed, but is commonly /var/lib/tomcat, /var/lib/tomcat7, or similar:

Notes:
If I view /etc/tomcat/tomcat.conf, I can see:
# Where your tomcat installation lives
CATALINA_HOME="/usr/share/tomcat"


1. Make a directory to store the Guacamole client

mkdir /etc/guacamole

2. Download Guacamole client binary file
[root@workshop guacamole-server-1.3.0]# wget https://downloads.apache.org/guacamole/1.3.0/binary/guacamole-1.3.0.war -O /etc/guacamole/guacamole.war



3. Create a link between the files
# ln -s /etc/guacamole/ /usr/share/tomcat/.guacamole
# ln -s /etc/guacamole/guacamole.war /usr/share/tomcat/webapps/

In the installer guide:

# cp guacamole.war /var/lib/tomcat/webapps
(not sure why we use ln command above)


4. Restart tomcat and guacamole services
Once the .war file is in place, you may need to restart Tomcat to force Tomcat to deploy the new web application, and the guacd daemon must be started if it isn't running already. In this example, both Tomcat and Guacamole are configured to start on boot (systemctl enable ...).

# systemctl restart tomcat guacd


After restarting Tomcat and starting guacd, Guacamole is successfully installed, though it will not be fully running. In its current state, it is completely unconfigured, and further steps are required to add at least one Guacamole user and a few connections.



# ---------------------------------------------------------
# Configuring Guacamole Users and Connections
#--------------------------------------------------------
After installing Guacamole, you need to configure users and connections before Guacamole will work. Guacamole's default authentication method reads all users and connections from a single file called user-mapping.xml. This authentication method is intended to be sufficient for small deployments of Guacamole, and a relatively-easy means of verifying that Guacamole has been properly set up. Other, more complex authentication methods which use backend databases, LDAP, etc.

Regardless of the authentication method you use, Guacamole's configuration always consists of two main pieces: a directory referred to as GUACAMOLE_HOME (/etc/guacamole), which is the primary search location for configuration files, and guacamole.properties, the main configuration file used by Guacamole and its extensions.


1. Create guacamole.properties file. The Guacamole web application uses one main configuration file called guacamole.properties. This file is the common location for all configuration properties read by Guacamole or any extension of Guacamole, including authentication providers.

# vi /etc/guacamole/guacamole.properties

paste and save:

guacd-hostname: localhost
guacd-port:    4822
user-mapping:    /etc/guacamole/user-mapping.xml
auth-provider:    net.sourceforge.guacamole.net.basic.BasicFileAuthenticationProvider
basic-user-mapping:    /etc/guacamole/user-mapping.xml


2. Get the value of the encrypted version of the oracle password  using MD5 algorithm. This will be the oracle user password for guacamole.

echo -n [plain text password] | openssl md5
e.g.
echo -n Guac.LiveLabs_ | openssl md5
> (stdin)= 33e3cc7ec32572a99ce33db0b2f08643


3. Create guacamole user mapping file "/etc/guacamole/user-mapping.xml". Replace the password value with the one you got in the previous step.

# vi /etc/guacamole/user-mapping.xml

paste and save:

<user-mapping>
   <authorize username="oracle" password="33e3cc7ec32572a99ce33db0b2f08643" encoding="md5">
    <connection name="My LiveLabs Host">
      <protocol>vnc</protocol>
      <param name="hostname">localhost</param>
      <param name="port">5901</param>
      <param name="password">LiveLabs.Rocks_99</param>
    </connection>
   </authorize>
</user-mapping>

Explanation:
This step is using the default authentication module. Guacamole's default authentication module is simple and consists of a mapping of usernames to configurations. This authentication module comes with Guacamole and simply reads usernames and passwords from an XML file. It is always enabled, but will only read from the XML file if it exists, and is always last in priority relative to any other authentication extensions.

The default authentication provider used by Guacamole reads all username, password, and configuration information from a file called the "user mapping" located at GUACAMOLE_HOME/user-mapping.xml. Each user is specified with a corresponding <authorize> tag.

The VNC protocol is the simplest and first protocol supported by Guacamole. Although generally not as fast as RDP, many VNC servers are adequate, and VNC over Guacamole tends to be faster than VNC by itself due to decreased bandwidth usage.

VNC support for Guacamole is provided by the libguac-client-vnc library, which will be installed as part of guacamole-server if the required dependencies are present during the build.
VNC works by making outbound network connections to a particular host which runs one or more VNC servers. Each VNC server is associated with a display number, from which the appropriate port number is derived.

Network parameters:
-------------------
hostname: The hostname or IP address of the VNC server Guacamole should connect to.
port: The port the VNC server is listening on, usually 5900 or 5900 + display number. For example, if your VNC server is serving display number 1 (sometimes written as :1), your port number here would be 5901.
autoretry: The number of times to retry connecting before giving up and returning an error. In the case of a reverse connection, this is the number of times the connection process is allowed to time out.

Authentication
---------------
The VNC standard defines only password based authentication. Other authentication mechanisms exist, but are non-standard or proprietary. Guacamole currently supports both standard password-only based authentication, as well as username and password authentication.
username (optional): The username to use when attempting authentication, if any. This parameter is optional.
password (optional): he password to use when attempting authentication

If you are using the default authentication built into Guacamole, and you wish to grant access to a VNC connection to a particular user, you need to locate the <authorize> section for that user within your user-mapping.xml, and add a section like the above within it.


4. Assign permissions:

# chmod 600 /etc/guacamole/user-mapping.xml
# chown -R tomcat:tomcat /etc/guacamole



4. Restart tomcat and guacamole services
# systemctl restart tomcat guacd

5. Add the guacamole ports to firewall
# firewall-cmd --permanent --add-port={4822,8080}/tcp
# firewall-cmd --reload


6. In OCI, access VCN for database and add an ingress rule:
source cidr 0.0.0.0/0
dest port: 8080



## Access the Guacamole Desktop
LiveLabs compute instance are password-less and only accessible via SSH keys. As result it's important to adjust session settings some settings to ensure a better user experience.

- make sure you're not connected to VPN
- make sure you have a VCN tunnel connection via PuTTY

In a browser, enter:
 http://130.61.185.156:8080/guacamole
 130.61.185.156

Enter oracle, password = Guac.LiveLabs_

 Transfer file
 winscp
